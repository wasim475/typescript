{

    /*
    ==============================================================
                generic constraint keyof
    ================================================================

    keyof TypeScript-‡¶è‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø type operator, ‡¶Ø‡¶æ ‡¶ï‡ßã‡¶®‡ßã object ‡¶ü‡¶æ‡¶á‡¶™‡ßá‡¶∞ ‡¶∏‡¶¨ ‡¶ï‡ßÄ (property name) ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø union type ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡•§

‚úÖ ‡¶ï‡ßá‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßã?
object-‡¶è‡¶∞ ‡¶ï‡ßÄ ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡¶æ‡¶á‡¶™ ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶ö‡¶æ‡¶á‡¶≤‡ßá

‡¶ü‡¶æ‡¶á‡¶™-‡¶∏‡ßá‡¶´ ‡¶ï‡ßã‡¶° ‡¶≤‡¶ø‡¶ñ‡¶§‡ßá

dynamic property access ‡¶ü‡¶æ‡¶á‡¶™-‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

‚úÖ ‡¶ï‡¶ñ‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßã?
‡¶Ø‡¶ñ‡¶® ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶Æ‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶ö‡¶æ‡¶ì, ‡¶Ø‡ßá‡¶ü‡¶æ object-‡¶è‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü key-access ‡¶®‡¶ø‡ßü‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá

Generic utility functions ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá

‚úÖ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:

type Person = {
  name: string;
  age: number;
};

type PersonKeys = keyof Person; // 'name' | 'age'
‡¶è‡¶ñ‡¶® PersonKeys ‡¶π‡¶≤‡ßã union type: 'name' | 'age'

‚úÖ Practical Use:

function getProperty<T, K extends keyof T>(obj: T, key: K): T[K] {
  return obj[key];
}

const person = { name: 'Wasim', age: 29 };

const name = getProperty(person, 'name'); // string ‡¶ü‡¶æ‡¶á‡¶™
üëâ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá keyof ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶õ‡ßá ‡¶Ø‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡ßá‡¶¨‡¶≤ ‡¶¨‡ßà‡¶ß ‡¶ï‡ßÄ-‡¶á access ‡¶ï‡¶∞‡¶õ‡ßã‡•§
    */
    
    //
    type vehicle = {
        bike: string;
        car: string;
        ship: string
    }

    type Owner = "bike" | "car" | "ship"; // manually
    type Owner2 = keyof vehicle;
  
    const getPropertyValue = <X, Y extends keyof X>(obj: X, key: Y) => {
      return obj[key];
    };
  
    const user = {
      name: "Mr. Wasim",
      age: 26,
      address: "ctg",
    };
  
    const car = {
      model: "Toyota 100",
      year: 200,
    };
  
    const result1 = getPropertyValue(car, "year");
  
    // obj[key]   26
  
  

    //
}